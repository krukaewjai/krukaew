// ============================================
// CONFIGURATION
// ============================================
const SCORES_SHEET_NAME = "Scores";
const STUDENTS_SHEET_NAME = "Students";
const SCORES_HEADERS = ["id", "studentId", "studentName", "className", "scoreType", "subject", "score", "date", "isDeleted"];
const STUDENTS_HEADERS = ["id", "className", "studentId", "studentName", "isDeleted"];
const PASSWORD = '1234';

// ============================================
// MAIN API ENTRY POINT (NEW!)
// ============================================

/**
 * Handles POST requests from the GitHub Pages frontend.
 * This acts as a router to call other functions.
 */
function doPost(e) {
  try {
    const body = JSON.parse(e.postData.contents);
    const action = body.action;
    const payload = body.payload;
    let result;

    switch (action) {
      case 'verifyPassword':
        result = verifyPassword(payload.password);
        break;
      case 'getScores':
        result = getScores(payload.className);
        break;
      case 'addScore':
        result = addScore(payload.scoreData);
        break;
      case 'updateScore':
        result = updateScore(payload.scoreData);
        break;
      case 'deleteScore':
        result = deleteScore(payload.scoreId);
        break;
      case 'getStudentScores':
        result = getStudentScores(payload.studentId, payload.className);
        break;
      case 'getStudents':
        result = getStudents(payload.className);
        break;
      case 'addStudent':
        result = addStudent(payload.studentData);
        break;
      case 'updateStudent':
        result = updateStudent(payload.studentData);
        break;
      case 'deleteStudent':
        result = deleteStudent(payload.studentId);
        break;
      default:
        throw new Error("Invalid action specified.");
    }
    
    // Return a success response
    return ContentService
      .createTextOutput(JSON.stringify({ success: true, data: result }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    // Return an error response
    Logger.log(error);
    return ContentService
      .createTextOutput(JSON.stringify({ success: false, message: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// ============================================
// INTERNAL FUNCTIONS (No longer return JSON strings)
// ============================================

function verifyPassword(password) {
  return { success: password === PASSWORD };
}

function getScores(className) {
  const sheet = getSheet(SCORES_SHEET_NAME, SCORES_HEADERS);
  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  return data.map(rowToObject(headers)).filter(row => row.className == className && !row.isDeleted);
}

function addScore(scoreData) {
  const sheet = getSheet(SCORES_SHEET_NAME, SCORES_HEADERS);
  const newId = new Date().getTime().toString();
  const newRow = [newId, scoreData.studentId, scoreData.studentName, scoreData.className, scoreData.scoreType, scoreData.subject, scoreData.score, new Date().toLocaleDateString('th-TH'), false];
  sheet.appendRow(newRow);
  return { newId: newId };
}

function getStudentScores(studentId, className) {
  const sheet = getSheet(SCORES_SHEET_NAME, SCORES_HEADERS);
  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  return data.map(rowToObject(headers)).filter(row => 
      String(row.studentId) == String(studentId) && 
      row.className == className && 
      !row.isDeleted
  );
}

function getStudents(className) {
  const sheet = getSheet(STUDENTS_SHEET_NAME, STUDENTS_HEADERS);
  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  return data.map(rowToObject(headers)).filter(row => row.className == className && !row.isDeleted);
}

function addStudent(studentData) {
  const sheet = getSheet(STUDENTS_SHEET_NAME, STUDENTS_HEADERS);
  const newId = new Date().getTime().toString() + "-S";
  const newRow = [newId, studentData.className, studentData.studentId, studentData.studentName, false];
  sheet.appendRow(newRow);
  return { newId: newId };
}

// Functions like updateScore, deleteScore, etc., would also be modified to return objects instead of JSON strings.
// For brevity, only the core functions are shown fully modified. The logic remains the same.
// The provided doPost handles all functions correctly. Helper functions below are unchanged.

// ============================================
// HELPER & UTILITY FUNCTIONS (Unchanged)
// ============================================
// ... (Your existing update/delete/helper functions go here, but they should return objects, not JSON.stringify)
// The provided doPost function will handle all existing functions correctly as long as they are present.

const rowToObject = (headers) => (row) => {
  return headers.reduce((acc, header, index) => {
    acc[header] = row[index];
    return acc;
  }, {});
};

function getSheet(sheetName, headers) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
    sheet.appendRow(headers);
    sheet.setFrozenRows(1);
  }
  return sheet;
}
// Note: You need to have the rest of your functions (updateScore, deleteScore, updateStudent, deleteStudent) in the script as well.
// The doPost function above is already set up to call them.